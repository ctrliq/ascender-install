- name: Retrieve the current time in order to timestamp files
  ansible.builtin.setup:
    gather_subset:
     - date_time

# Check for existing eks cluster

- name: "Check the status of target eks cluster named {{ EKS_CLUSTER_NAME }}"
  ansible.builtin.command:
    cmd: "eksctl get cluster -n {{ EKS_CLUSTER_NAME }}"
  register: eks_cluster_status
  ignore_errors: true

#Set up new eks cluster
- name: "If target cluster {{ EKS_CLUSTER_NAME }} does not exist, create it"
  block: 

    - name: Query for AmazonEBSCSIDriverPolicy policy ARN
      ansible.builtin.command:
        cmd: "aws iam list-policies --query 'Policies[?PolicyName==`AmazonEBSCSIDriverPolicy`].Arn'"
      register: policy_query
        
    - ansible.builtin.debug:
        var: policy_query

    - name: Ensure IAM AmazonEBSCSIDriverPolicy exists
      ansible.builtin.command:
        cmd: "aws iam create-policy --policy-name AmazonEBSCSIDriverPolicy --policy-document {{ lookup('ansible.builtin.template', 'templates/eks/ebs-scsi-driver-policy.json') }}"
      when: policy_query.stdout == "[]"
      
    - name: Retrieve AmazonEBSCSIDriverPolicy policy ARN
      ansible.builtin.command:
        cmd: "aws iam list-policies --query 'Policies[?PolicyName==`AmazonEBSCSIDriverPolicy`].Arn'"
      register: policy_arn

    - name: Print out the arn for the policy AmazonEBSCSIDriverPolicy
      ansible.builtin.debug:
        msg: "ARN is {{ policy_arn.stdout[2:] }}"
      when: policy_arn.stdout != "[]"

    - name: Set fact ebs_scsi_driver_policy_arn
      ansible.builtin.set_fact:
        ebs_scsi_driver_policy_arn: "{{ policy_arn.stdout[2:] }}"

    - name: Generate manifest to set up new eks cluster
      ansible.builtin.template:
        src: templates/eks/eks-cluster-manifest.yml
        dest: "{{ tmp_dir }}/eks-cluster-manifest.yml"

    - name: Generate manifest to set up new eks cluster with timestamp attached, for purposes of cluster deletion later
      ansible.builtin.template:
        src: templates/eks/eks-cluster-manifest.yml
        dest: "{{ tmp_dir }}/eks-cluster-manifest.yml.{{ ansible_date_time.iso8601_basic_short }}"

    - name: Set up new eks cluster (this will take upwards of 30 mins)
      ansible.builtin.command:
        cmd: "eksctl create cluster -f {{ tmp_dir }}/eks-cluster-manifest.yml"

    - name: Delete eks cluster manifest
      ansible.builtin.file:
        path: "{{ tmp_dir }}/eks-cluster-manifest.yml"
        state: absent
    
  when: kube_install or eks_cluster_status.failed

- name: Determine if ~/.kube/config already exists
  ansible.builtin.stat:
    path: ~/.kube/config
  register: existing_kubeconfig

- name: create backup of existing ~/.kube/config
  ansible.builtin.copy:
    src: ~/.kube/config
    dest: "~/.kube/config.{{ ansible_date_time.iso8601_basic_short }}"
  when: existing_kubeconfig.stat.exists

- name: Delete existing ~/.kube/config
  ansible.builtin.file:
    path: ~/.kube/config
    state: absent
  when: existing_kubeconfig.stat.exists

- name: "Retrieve kubeconfig for new eks cluster {{ EKS_CLUSTER_NAME }}"
  ansible.builtin.command:
    cmd: "aws eks update-kubeconfig --region {{ EKS_CLUSTER_REGION }} --name {{ EKS_CLUSTER_NAME }}"

- name: Query for AWSLoadBalancerControllerIAMPolicy policy ARN
  ansible.builtin.command:
    cmd: "aws iam list-policies --query 'Policies[?PolicyName==`AWSLoadBalancerControllerIAMPolicy`].Arn'"
  register: policy_query
    
- ansible.builtin.debug:
    var: policy_query

- name: Ensure IAM AWS Load Balancer Controller Policy exists
  ansible.builtin.command:
    cmd: "aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document {{ lookup('ansible.builtin.template', 'templates/eks/iam-policy.json') }}"
  when: policy_query.stdout == "[]"
  
- name: Retrieve AWSLoadBalancerControllerIAMPolicy policy ARN
  ansible.builtin.command:
    cmd: "aws iam list-policies --query 'Policies[?PolicyName==`AWSLoadBalancerControllerIAMPolicy`].Arn'"
  register: policy_arn

- name: Print out the arn for the policy AWSLoadBalancerControllerIAMPolicy
  ansible.builtin.debug:
    msg: "ARN is {{ policy_arn.stdout[2:] }}"
  when: policy_arn.stdout != "[]"

- name: Set fact aws_lb_controller_policy_arn
  ansible.builtin.set_fact:
    aws_lb_controller_policy_arn: "{{ policy_arn.stdout[2:] }}"

- name: create aws-load-balancer-controller iamserviceaccount
  ansible.builtin.command:
    cmd: "eksctl create iamserviceaccount --cluster={{ EKS_CLUSTER_NAME }} --namespace=kube-system --name=aws-load-balancer-controller --attach-policy-arn={{ aws_lb_controller_policy_arn }} --override-existing-serviceaccounts --approve"

- name: Get an existing Service object
  kubernetes.core.k8s_info:
    api_version: v1
    kind: serviceaccount
    name: aws-load-balancer-controller
    namespace: kube-system
  register: alb_sa

# - name: debug
#   ansible.builtin.debug:
#     var: alb_sa

# - name: debug
#   ansible.builtin.debug:
#     var: alb_sa.resources[0].metadata.annotations

- name: Install cert-manager in the cluster
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('ansible.builtin.template', 'templates/eks/cert-manager.yml') }}"
  retries: 3
  delay: 5

- name: install the ingress controller
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('ansible.builtin.template', 'templates/eks/ingress-controller.yml') }}"
  retries: 3
  delay: 5

- name: install the ingress class params
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('ansible.builtin.template', 'templates/eks/ingress-class-params.yml') }}"
  retries: 3
  delay: 5