- name: Retrieve the current time in order to timestamp files
  ansible.builtin.setup:
    gather_subset:
     - date_time

- name: Determine if ~/.kube/config already exists
  ansible.builtin.stat:
    path: ~/.kube/config
  register: existing_kubeconfig

- name: create backup of existing ~/.kube/config
  ansible.builtin.copy:
    src: ~/.kube/config
    dest: "~/.kube/config.{{ ansible_date_time.iso8601_basic_short }}"
  when: 
    - existing_kubeconfig.stat.exists
    - download_kubeconfig

- name: Delete existing ~/.kube/config
  ansible.builtin.file:
    path: ~/.kube/config
    state: absent
  when: 
    - existing_kubeconfig.stat.exists
    - download_kubeconfig

# Check for existing aks cluster
- name: Get list of all AKS clusters
  ansible.builtin.shell: az aks list --query '[].{name:name, resourceGroup:resourceGroup}' -o json
  register: aks_clusters

- name: Find the AKS cluster by name
  ansible.builtin.set_fact:
    aks_cluster: "{{ aks_clusters.stdout | from_json | selectattr('name', 'equalto', AKS_CLUSTER_NAME) | list }}"

- name: Check if AKS cluster exists
  ansible.builtin.set_fact:
    aks_cluster_exists: "{{ aks_cluster | length > 0 }}"

- ansible.builtin.debug:
    msg: AKS cluster {{ AKS_CLUSTER_NAME }} exists
  when: aks_cluster_exists

- ansible.builtin.debug:
    msg: AKS cluster {{ AKS_CLUSTER_NAME }} DOES NOT exist
  when: not aks_cluster_exists
  

# If AKS_CLUSTER_NAME does not exist, set up new aks cluster
- name: "If target cluster {{ AKS_CLUSTER_NAME }} does not exist, create it"
  block: 

    - name: Ensure that the aks_deploy directory exists
      ansible.builtin.file:
        path: "{{ playbook_dir }}/../ascender_install_artifacts/aks_deploy"
        state: directory

    - name: Copy AKS Terraform Directory
      ansible.builtin.copy:
        src: files/aks_deploy
        dest: "{{ playbook_dir }}/../ascender_install_artifacts"
        mode: 0777 

    - name: Initialize Terraform
      ansible.builtin.command:
        cmd: terraform init
        chdir: "{{ playbook_dir }}/../ascender_install_artifacts/aks_deploy"
    
    - name: Terraform Plan
      ansible.builtin.command:
        cmd: terraform plan
        chdir: "{{ playbook_dir }}/../ascender_install_artifacts/aks_deploy"

    - name: Provision AKS cluster via Terraform
      community.general.terraform:
        project_path: "{{ playbook_dir }}/../ascender_install_artifacts/aks_deploy"
        state: present
        variables:
          home_dir: "/home/{{ ansible_user}}"
          aks_cluster_name: "{{ AKS_CLUSTER_NAME }}"
          resource_group_location: "{{ AKS_CLUSTER_REGION }}"
          node_count: "{{ AKS_NUM_WORKER_NODES }}"
          azure_vm_size: "{{ AKS_INSTANCE_TYPE }}"
          azure_disk_size: "{{ AKS_WORKER_VOLUME_SIZE }}"
      register: terraform_output

    - name: Ensure that the KUBECONFIG file can successfully authenticate to the AKS cluster
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
      register: result
      ignore_errors: yes
      retries: 5
      delay: 10
      until: result.resources is defined and result.resources | length > 0

    - name: Fail the playbook if AKS authentication check is unsuccessful
      ansible.builtin.fail:
        msg: "Unable to retrieve AKS nodes after multiple retries."
      when: result.resources is not defined or result.resources | length == 0
  
  when: not aks_cluster_exists and AKS_CLUSTER_STATUS=="provision"

- name: Retrieve the resource group of the AKS cluster
  ansible.builtin.command: az aks list --query "[?name=='{{ AKS_CLUSTER_NAME }}'].{ResourceGroup:resourceGroup}" -o tsv
  register: aks_resource_group
  when: 
    - download_kubeconfig
    - AKS_CLUSTER_STATUS=="configure" or AKS_CLUSTER_STATUS=="no_action"

- name: Retrieve kubeconfig for the AKS cluster
  ansible.builtin.command: >
    az aks get-credentials --resource-group {{ aks_resource_group.stdout }} --name {{ AKS_CLUSTER_NAME }} --file "~/.kube/config"
  register: get_credentials_result
  when: 
    - download_kubeconfig
    - AKS_CLUSTER_STATUS=="configure" or AKS_CLUSTER_STATUS=="no_action"