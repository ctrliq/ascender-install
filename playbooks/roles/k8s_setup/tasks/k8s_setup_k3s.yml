- name: Wait 600 seconds for target connection to become reachable/usable
  ansible.builtin.wait_for_connection:
  delay: 15

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Stop firewall service
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: false
  when:
    - firewalld_disable | bool 
    - "'firewalld.service' in services"

- name: Install K3s Online (this may take up to 5 minutes)
  ansible.builtin.shell: curl -sfL https://get.k3s.io | sh -
  when:
    - kube_install
    - "'k3s.service' not in services"
    - not k8s_offline

- name: K3s Offline Install
  when:
    - kube_install
    - "'k3s.service' not in services"
    - k8s_offline
  block:
  - name: Copy k3s Binary
    ansible.builtin.copy:
      src: "{{ playbook_dir }}/../offline/packages/k3s"
      dest: /usr/local/bin/k3s
      mode: '0755'

  - name: Create images directory
    ansible.builtin.file:
      path: /var/lib/rancher/k3s/agent/images/
      state: directory

  - name: Copy images
    ansible.builtin.copy:
      src: "{{ item }}"
      dest: "/var/lib/rancher/k3s/agent/images/{{ item | basename }}"
      remote_src: true
    with_fileglob: "{{ playbook_dir }}/../offline/images/*"

  - name: Make Installer executable
    ansible.builtin.file:
      path: "{{ playbook_dir }}/../offline/packages/k3s_install.sh"
      state: file
      mode: "0755"

  - name: Install K3s Offline
    ansible.builtin.shell: INSTALL_K3S_SKIP_DOWNLOAD=true INSTALL_K3S_EXEC="--write-kubeconfig-mode 644" INSTALL_K3S_SKIP_SELINUX_RPM=true INSTALL_K3S_SELINUX_WARN=true {{ playbook_dir }}/../offline/packages/k3s_install.sh

- name: Ensure that ~/.kube directory exists
  ansible.builtin.file:
    path: ~/.kube
    state: directory
  delegate_to: localhost

- name: Copy kubeconfig file from default location to the ~/.kube directory"
  ansible.builtin.fetch:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~/.kube/config
    flat: true
  become: true
  when: download_kubeconfig

- name: "Replace the kubeconfig cluster kube-api server IP with the public IP address, if the cluster is remote "
  ansible.builtin.replace:
    path: ~/.kube/config
    regexp: '127.0.0.1'
    replace: "{{ k3s_master_node_ip }}"
  delegate_to: localhost
  when: 
    - ansible_host != "localhost"
    - download_kubeconfig
  
- name: Get a list of all nodes
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
    validate_certs: false
  delegate_to: localhost
  environment:
    K8S_AUTH_KUBECONFIG: "{{ lookup('env', 'HOME') }}/.kube/config"

- name: "Ensure a local DNS entry for {{ ASCENDER_HOSTNAME }} exists"
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: "{{ ASCENDER_HOSTNAME }}"
    line: "{{ k3s_master_node_ip }}   {{ ASCENDER_HOSTNAME }}"
    owner: root
    group: root
    mode: '0644'
  become: true
  delegate_to: localhost
  when: use_etc_hosts

# - name: "Ensure a local DNS entry for {{ ASCENDER_HOSTNAME }} is removed if using external DNS"
#   ansible.builtin.lineinfile:
#     path: /etc/hosts
#     regexp: "{{ ASCENDER_HOSTNAME }}"
#     state: absent
#     owner: root
#     group: root
#     mode: '0644'
#   become: true
#   delegate_to: localhost
#   when: not use_etc_hosts

- name: "Ensure a local DNS entry for {{ LEDGER_HOSTNAME }} exists"
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: "{{ LEDGER_HOSTNAME }}"
    line: "{{ k3s_master_node_ip }}   {{ LEDGER_HOSTNAME }}"
    owner: root
    group: root
    mode: '0644'
  become: true
  delegate_to: localhost
  when:
    - use_etc_hosts
    - LEDGER_INSTALL

- name: "Ensure a local DNS entry for {{ REACT_HOSTNAME }} exists"
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: "{{ REACT_HOSTNAME }}"
    line: "{{ k3s_master_node_ip }}   {{ REACT_HOSTNAME }}"
    owner: root
    group: root
    mode: '0644'
  become: true
  delegate_to: localhost
  when:
    - use_etc_hosts
    - REACT_INSTALL

    
# - name: "Ensure a local DNS entry for {{ LEDGER_HOSTNAME }} is removed is using external DNS"
#   ansible.builtin.lineinfile:
#     path: /etc/hosts
#     regexp: "{{ LEDGER_HOSTNAME }}"
#     state: absent
#     owner: root
#     group: root
#     mode: '0644'
#   become: true
#   delegate_to: localhost
#   when: 
#     - not use_etc_hosts
#     - LEDGER_INSTALL