- name: Retrieve the current time in order to timestamp files
  ansible.builtin.setup:
    gather_subset:
     - date_time

- name: Create Namespace
  kubernetes.core.k8s:
    name: "{{ ASCENDER_NAMESPACE }}"
    api_version: v1
    kind: Namespace
    verify_ssl: false
    state: present
    
- name: Generate manifest to install AWX Operator
  ansible.builtin.template:
    src: templates/awx-operator/kustomization.j2
    dest: "{{ tmp_dir }}/kustomization.yml"

- name: Generate manifest to install AWX Operator with timestamp attached, for purposes of operator deletion later
  ansible.builtin.template:
    src: templates/awx-operator/kustomization.j2
    dest: "{{ tmp_dir }}/kustomization.yml.{{ ansible_date_time.iso8601_basic_short }}"

- name: Copy Operator Source
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/../offline/awx-operator-{{ ANSIBLE_OPERATOR_VERSION }}/config"
    dest: "{{ tmp_dir }}/"
    remote_src: true
  when: k8s_offline | default(false) | bool

- name: Import Operator Images
  ansible.builtin.shell:
    cmd: k3s ctr images import {{ item }}
  with_fileglob:
    - "{{ playbook_dir }}/../offline/images/kube-rbac-proxy*.tar"
    - "{{ playbook_dir }}/../offline/images/awx-operator*.tar"
  when: k8s_offline | default(false) | bool

- name: Install AWX Operator with Kustomize
  kubernetes.core.k8s:
    definition: "{{ lookup('kubernetes.core.kustomize', dir=tmp_dir) }}"
    verify_ssl: false

- name: delete Kustomization file
  ansible.builtin.file:
    path: "{{ tmp_dir }}/kustomization.yml"
    state: absent

- name: Import Ascender Images
  ansible.builtin.shell:
    cmd: k3s ctr images import {{ item }}
  with_fileglob:
    - "{{ playbook_dir }}/../offline/images/ascender*.tar"
    - "{{ playbook_dir }}/../offline/images/postgres*.tar"
    - "{{ playbook_dir }}/../offline/images/redis*.tar"
  when: k8s_offline | default(false) | bool

- name: Wait for Operator deployment to be ready
  kubernetes.core.k8s_info:
    kind: Deployment
    wait: yes
    name: awx-operator-controller-manager
    namespace: "{{ ASCENDER_NAMESPACE }}"
    wait_sleep: 10
    wait_timeout: 360
    verify_ssl: false

- name: Generate manifest to install AWX ascender-app k8s object with timestamp attached, for purposes of deletion later
  ansible.builtin.template:
    src: "ascender-deployment/ascender-deployment-k3s.yml"
    dest: "{{ tmp_dir }}/ascender-deployment-k3s.yml.{{ ansible_date_time.iso8601_basic_short }}" 

- name: "Apply AWX ascender-app manifest for {{ k8s_platform }}"
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('ansible.builtin.template', 'ascender-deployment/ascender-deployment-k3s.yml') }}"
    verify_ssl: false

- name: Wait for ascender-app-web Deployment to complete setting up (this may take up to 10 minutes)
  kubernetes.core.k8s_info:
    kind: Deployment
    wait: yes
    name: ascender-app-web
    namespace: "{{ ASCENDER_NAMESPACE }}"
    wait_sleep: 10
    wait_timeout: 360
    verify_ssl: false
  register: ascender_web_deployment

- name: Set the Ascender URL
  ansible.builtin.set_fact:
      ascender_ip: "{{ ASCENDER_HOSTNAME }}"
      ascender_port: "{{ '30080' if k3s_service_type == 'NodePort' else '443' if k8s_lb_protocol == 'https' else '80' }}"

- ansible.builtin.debug:
    msg: "The Ascender API endpoint is {{ k8s_lb_protocol }}://{{ ascender_ip }}:{{ ascender_port }}/api/v2/ping/"
    
- name: Wait until Ascender API is Up (This may take between 10-20 mins)
  ansible.builtin.uri:
    url: "{{ k8s_lb_protocol }}://{{ ascender_ip }}:{{ ascender_port }}/api/v2/ping/"
    return_content: yes
    validate_certs: no
    status_code:
      - 200
  until: 
    - uri_output.status|int == 200
    - uri_output.url == k8s_lb_protocol + "://" + ascender_ip + ":" + ascender_port + "/api/v2/ping/"
  retries: 200
  delay: 10
  register: uri_output

- ansible.builtin.debug:
    msg: "Ascender API is up"
