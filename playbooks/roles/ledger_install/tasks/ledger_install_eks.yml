- name: Retrieve the current time in order to timestamp files
  ansible.builtin.setup:
    gather_subset:
     - date_time

- name: Generate manifest to install Ledger k8s object with timestamp attached, for purposes of deletion later
  ansible.builtin.template:
    src: ledger_deployment_eks.yaml
    dest: "{{ tmp_dir }}/ledger_deployment_eks.yaml.{{ ansible_date_time.iso8601_basic_short }}"

- name: "Apply ledger manifest for {{ k8s_platform }}"
  kubernetes.core.k8s:
    state: present
    namespace: "{{ LEDGER_NAMESPACE }}"
    definition: "{{ lookup('template', 'templates/ledger_deployment_eks.yaml') | from_yaml_all }}"
    verify_ssl: false

- name: Wait for Ledger web Deployment to complete setting up
  kubernetes.core.k8s_info:
    kind: Deployment
    wait: yes
    name: web
    namespace: "{{ LEDGER_NAMESPACE }}"
    wait_sleep: 10
    wait_timeout: 360
    verify_ssl: false

- name: Wait for Ledger parser Service to be up
  kubernetes.core.k8s_info:
    kind: Service
    wait: yes
    name: parser
    namespace: "{{ LEDGER_NAMESPACE }}"
    wait_sleep: 10
    wait_timeout: 360
    verify_ssl: false
  register: parser_svc
      
- ansible.builtin.debug:
    var: parser_svc.resources[0].spec.ports[0].port

- name: Retrieve the ledger-web-ingress Ingress object
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Ingress
    name: ledger-web-ingress
    namespace: "{{ LEDGER_NAMESPACE }}"
  register: ledger_ingress
  until:
    - ledger_ingress.resources[0].status.loadBalancer.ingress[0].hostname is defined
    - ledger_ingress.resources[0].spec.rules[0].host is defined
  retries: 20

- ansible.builtin.debug: 
    var: ledger_ingress.resources[0].status.loadBalancer.ingress[0].hostname

- ansible.builtin.debug: 
    var: ledger_ingress.resources[0].spec.rules[0].host

- name: Retrieve the hosted zone ID
  ansible.builtin.command: >
    aws route53 list-hosted-zones
    --query "HostedZones[?Name == '{{ ASCENDER_DOMAIN }}.'].Id | [0]"
    --output text
  register: hosted_zone_id
  when: USE_ROUTE_53

- name: Check if hosted zone ID was found
  ansible.builtin.fail:
    msg: "Hosted zone ID not found for domain {{ ASCENDER_DOMAIN }}"
  when: 
    - hosted_zone_id.stdout == ""
    - USE_ROUTE_53

- name: Prepare change batch JSON
  ansible.builtin.set_fact:
    change_batch: |
      {{
        {
          "Comment": "Updating or creating CNAME record for " + LEDGER_HOSTNAME,
          "Changes": [
            {
              "Action": "UPSERT",
              "ResourceRecordSet": {
                "Name": LEDGER_HOSTNAME,
                "Type": "CNAME",
                "TTL": 300,
                "ResourceRecords": [
                  {
                    "Value": ledger_ingress.resources[0].status.loadBalancer.ingress[0].hostname
                  }
                ]
              }
            }
          ]
        } | to_nice_json
      }}
  when: USE_ROUTE_53

- name: Write change batch JSON to file
  ansible.builtin.copy:
    content: "{{ change_batch }}"
    dest: /tmp/change-batch.json
  when: USE_ROUTE_53

- name: Update or create CNAME record
  ansible.builtin.command: >
    aws route53 change-resource-record-sets
    --hosted-zone-id {{ hosted_zone_id.stdout }}
    --change-batch file:///tmp/change-batch.json
  register: update_result
  when: USE_ROUTE_53

- name: Indicate Instructions for non-AWS DNS Domain Management
  ansible.builtin.debug: 
    msg: "Please manually create a DNS CNAME record for {{ ASCENDER_HOSTNAME }} in your DNS Record Manager of choice, mapping to {{ ledger_ingress.resources[0].status.loadBalancer.ingress[0].hostname }}"
  when: not USE_ROUTE_53

- name: Indicate Instructions for non-AWS DNS Domain Management
  ansible.builtin.debug: 
    msg: "Please manually create a DNS A record for {{ LEDGER_HOSTNAME }} in your DNS Record Manager of choice, mapping to {{ ledger_ingress.resources[0].status.loadBalancer.ingress[0].hostname }}"
  when: not USE_ROUTE_53

- name: Set the Ledger URL
  ansible.builtin.set_fact:
      ledger_ip: "{{ LEDGER_HOSTNAME }}"
      ledger_port: "{{  '443' if k8s_lb_protocol == 'https' else '80' }}"
      ledger_parser_ip: "{{ parser_svc.resources[0].spec.clusterIP }}"
      ledger_parser_port: "{{ parser_svc.resources[0].spec.ports[0].port }}"

- ansible.builtin.debug:
    msg: "The Ledger endpoint is {{ k8s_lb_protocol }}://{{ ledger_ip }}:{{ ledger_port }}"

- name: Wait until Ledger endpoint is Up
  ansible.builtin.uri:
    url: "{{ k8s_lb_protocol }}://{{ ledger_ip }}:{{ ledger_port }}"
    return_content: yes
    validate_certs: no
    status_code:
      - 200
  until: uri_output.status == 200
  retries: 200
  delay: 10
  register: uri_output

- ansible.builtin.debug:
    msg: "Ledger webpage is up"

- name: Set the Ascender URL and Credentials for HTTPS
  ansible.builtin.set_fact:
    ascender_username: "{{ ASCENDER_ADMIN_USER }}"
    ascender_ip: "{{ ASCENDER_HOSTNAME }}"
    ascender_port: 443
    ascender_password: "{{ ASCENDER_ADMIN_PASSWORD }}"
  when: k8s_lb_protocol == "https"

- name: Set the Ascender URL and Credentials for HTTP
  ansible.builtin.set_fact:
      ascender_username: "{{ ASCENDER_ADMIN_USER }}"
      ascender_ip: "{{ ASCENDER_HOSTNAME }}"
      ascender_port: 80
  when: k8s_lb_protocol == "http"

- ansible.builtin.debug:
    msg: "The Ascender API endpoint is {{ k8s_lb_protocol }}://{{ ascender_ip }}:{{ ascender_port }}/api/v2/ping/"

- name: Wait until Ascender API is Up
  ansible.builtin.uri:
    url: "{{ k8s_lb_protocol }}://{{ ascender_ip }}:{{ ascender_port }}/api/v2/ping/"
    return_content: yes
    validate_certs: no
    status_code:
      - 200
  until: uri_output.status == 200
  retries: 60
  delay: 10
  register: uri_output

- ansible.builtin.debug:
    msg: "Ascender API is up"

- name: Set all the logging parameters
  awx.awx.settings:
    controller_host: "{{ k8s_lb_protocol }}://{{ ascender_ip }}:{{ ascender_port }}"
    controller_username: "{{ ASCENDER_ADMIN_USER }}"
    controller_password: "{{ ASCENDER_ADMIN_PASSWORD }}"
    settings:
      LOG_AGGREGATOR_HOST: "{{ k8s_lb_protocol }}://{{ ledger_parser_ip }}"
      LOG_AGGREGATOR_PORT: "{{ ledger_parser_port }}"
      LOG_AGGREGATOR_TYPE: other
      LOG_AGGREGATOR_ENABLED: true
      LOG_AGGREGATOR_VERIFY_CERT: false
      LOG_AGGREGATOR_LEVEL: INFO
    validate_certs: false