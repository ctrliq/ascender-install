- hosts: localhost
  connection: local
  gather_facts: no
  become: true
  vars_files:
    - ["../custom.config.yml", "../default.config.yml"]
  vars:
    containers:
      - name: ascender
        path: ghcr.io/ctrliq/ascender
        tag: "{{ ASCENDER_VERSION }}"
        type: ascender
      - name: ledger-web
        path: ghcr.io/ctrliq/ascender-ledger/ledger-web
        tag: latest
        type: ledger
      - name: ledger-parser
        path: ghcr.io/ctrliq/ascender-ledger/ledger-parser
        tag: latest
        type: ledger
      - name: ledger-db
        path: ghcr.io/ctrliq/ascender-ledger/ledger-db
        tag: latest
        type: ledger
      - name: awx-operator
        path: quay.io/ansible/awx-operator
        tag: "{{ ANSIBLE_OPERATOR_VERSION }}"
        type: ascender
      - name: ascender-ee
        path: ghcr.io/ctrliq/ascender-ee
        tag: latest
        type: ascender
      - name: postgres
        path: docker.io/library/postgres
        tag: 13
        type: ascender
      - name: redis
        path: docker.io/library/redis
        tag: 7
        type: ascender
      - name: kube-rbac-proxy
        path: gcr.io/kubebuilder/kube-rbac-proxy
        tag: v0.15.0
        type: ascender
    rpms:
      - kubectl
      - python3-kubernetes
    k3s_images_url: https://github.com/k3s-io/k3s/releases/download/v1.28.6%2Bk3s2/k3s-airgap-images-amd64.tar.gz
    k3s_binary_url: https://github.com/k3s-io/k3s/releases/download/v1.28.6%2Bk3s2/k3s
    offline_dir: "{{ playbook_dir }}/../offline"

  tasks:
    - name: Set directory facts
      set_fact:
        package_dir: "{{ offline_dir }}/packages"
        image_dir: "{{ offline_dir }}/images"
        collection_dir: "{{ offline_dir }}/collections"
        collections: "{{ lookup('file','../collections/requirements.yml') | from_yaml }}"

####################### RPM PACKAGES #######################

    - name: Enable EPEL Repo
      ansible.builtin.dnf:
        name: epel-release
        state: present

    - name: Add the Kubernetes yum repository
      ansible.builtin.copy:
        dest: /etc/yum.repos.d/kubernetes.repo
        content: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
          enabled=0
          gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key

    - name: Ensure packages directory exists
      ansible.builtin.file:
        path: "{{ package_dir }}"
        state: directory

    - name: Remove rpms if Exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_fileglob: "{{ package_dir }}/*.rpm"

    - name: Download the rpms
      ansible.builtin.dnf:
        name: "{{ item }}"
        download_only: true
        download_dir: "{{ package_dir }}"
        enablerepo: kubernetes
        state: present
      loop: "{{ rpms }}"

####################### ANSIBLE OPERATOR #######################

    - name: Remove Operator if Exists
      ansible.builtin.file:
        path: "{{ offline_dir }}/awx-operator-{{ ANSIBLE_OPERATOR_VERSION }}"
        state: absent

    - name: Download the Ansible Operator tar file
      ansible.builtin.get_url:
        url: https://api.github.com/repos/ansible/awx-operator/tarball/{{ ANSIBLE_OPERATOR_VERSION }}
        dest: "{{ offline_dir }}/awx-operator.tar"

    - name: Extract Ansible Operator tar
      ansible.builtin.unarchive:
        src: "{{ offline_dir }}/awx-operator.tar"
        dest: "{{ offline_dir }}/"

    - name: Find the extracted directory name
      ansible.builtin.find:
        paths: "{{ offline_dir }}"
        patterns: 'ansible-awx-operator-*'
        file_type: directory
      register: ops

    - name: Rename the directory
      ansible.builtin.command:
        cmd: mv "{{ ops.files[0].path }}" "{{ offline_dir }}/awx-operator-{{ ANSIBLE_OPERATOR_VERSION }}"
      when: ops.matched == 1

    - name: Fix the Operator Version
      ansible.builtin.lineinfile:
        path: "{{ offline_dir }}/awx-operator-{{ ANSIBLE_OPERATOR_VERSION }}/config/manager/kustomization.yaml"
        search_string: 'newTag: latest'
        line: "  newTag: {{ ANSIBLE_OPERATOR_VERSION }}"

    - name: Fix the Pull Policy
      ansible.builtin.lineinfile:
        path: "{{ offline_dir }}/awx-operator-{{ ANSIBLE_OPERATOR_VERSION }}/config/manager/manager.yaml"
        search_string: 'imagePullPolicy:'
        line: "        imagePullPolicy: Never"

    - name: Remove Operator tar
      ansible.builtin.file:
        path: "{{ offline_dir }}/awx-operator.tar"
        state: absent

####################### ANSIBLE COLLECTIONS #######################

    - name: Ensure collections directory exists
      ansible.builtin.file:
        path: "{{ collection_dir }}"
        state: directory

    - name: Download collections
      ansible.builtin.command:
        cmd: ansible-galaxy collection download "{{ item.name }}:{{ item.version | replace('>','') | replace('=','') }}" -p {{ offline_dir }}/collections/
        creates:  "{{ offline_dir }}/collections/{{ item.name | replace('.','-') }}-{{ item.version | replace('>','') | replace('=','') }}.tar.gz"
      loop: "{{ collections.collections }}"

    - name: Remove temp requirements file
      ansible.builtin.file:
        path: "{{ collection_dir }}/requirements.yml"
        state: absent

####################### DOCKER IMAGES #######################
    - name: "K3s : Download Images"
      when: k8s_platform == "k3s"
      block:
        - name: Add Docker repository
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/centos/docker-ce.repo
            dest: /etc/yum.repos.d/docker-ce.repo
            mode: 0644

        - name: Install Docker
          ansible.builtin.dnf:
            name:
              - docker-ce
              - python3-pip
            state: present

        - name: Install requests python module
          ansible.builtin.pip:
            name: requests

        - name: Enable Docker Service
          ansible.builtin.service:
            name: docker
            state: started
            enabled: yes

        - name: Ensure images directory exists
          ansible.builtin.file:
            path: "{{ image_dir }}"
            state: directory

        - name: Download k3s binary
          ansible.builtin.get_url:
            url: "{{ k3s_binary_url }}"
            dest: "{{ package_dir }}/k3s"

        - name: Download k3s installer
          ansible.builtin.get_url:
            url: "https://get.k3s.io/"
            dest: "{{ package_dir }}/k3s_install.sh"

        - name: Download k3s images
          ansible.builtin.get_url:
            url: "{{ k3s_images_url }}"
            dest: "{{ image_dir }}/k3s-airgap-images-amd64.tar.gz"

        - name: Pull current offline images
          set_fact:
            images: "{{ lookup('fileglob', '{{ image_dir }}/*.tar', errors='warn') }}"

        - name: Pull images and create archives
          community.docker.docker_image:
            name: "{{ item.path }}"
            tag: "{{ item.tag }}"
    # This parameter doesn't create images the same way that docker save does
    #        archive_path: "{{ image_dir }}/{{ item.name }}-{{ item.tag }}.tar"
            source: pull
          when: 
            - item.name ~ '-' ~ item.tag ~ '.tar' not in images
            - item.type == 'ascender' or (item.type == 'ledger' and LEDGER_INSTALL == true)
          loop: "{{ containers }}"

        - name: Save Docker images
          ansible.builtin.shell:
            cmd: docker save {{ item.path }}:{{ item.tag }} > {{ image_dir }}/{{ item.name }}-{{ item.tag }}.tar
          when: 
            - item.name ~ '-' ~ item.tag ~ '.tar' not in images
            - item.type == 'ascender' or (item.type == 'ledger' and LEDGER_INSTALL == true)
          loop: "{{ containers }}"

    - name: "RKE2 : Download Images"
      when: 
        - k8s_platform == "rke2"
        - k8s_container_registry != ""
      block:
        - name: Prompt for push to registry
          ansible.builtin.pause:
            prompt: "Pull and push images to internal registry '{{ k8s_container_registry }}'\n(yes or no)"
            echo: yes
          register: push

        - when: push.user_input == "yes"
          block:
            - name: Add Docker repository
              ansible.builtin.get_url:
                url: https://download.docker.com/linux/centos/docker-ce.repo
                dest: /etc/yum.repos.d/docker-ce.repo
                mode: 0644

            - name: Install Docker
              ansible.builtin.dnf:
                name:
                  - docker-ce
                  - python3-pip
                state: present

            - name: Install requests python module
              ansible.builtin.pip:
                name: requests

            - name: Enable Docker Service
              ansible.builtin.service:
                name: docker
                state: started
                enabled: yes

            - name: Pull images
              community.docker.docker_image:
                name: "{{ item.path }}"
                tag: "{{ item.tag }}"
                source: pull
              loop: "{{ containers }}"
              when: item.type == 'ascender' or (item.type == 'ledger' and LEDGER_INSTALL == true)

            - name: Tag images
              community.docker.docker_image_tag:
                name: "{{ item.path }}:{{ item.tag }}"
                repository: "{{ k8s_container_registry | regex_replace('\\/$', '') }}/{{ item.path | basename }}:{{ item.tag }}"
              loop: "{{ containers }}"
              when: item.type == 'ascender' or (item.type == 'ledger' and LEDGER_INSTALL == true)

            - name: Push images
              community.docker.docker_image_push:
                name: "{{ k8s_container_registry | regex_replace('\\/$', '') }}/{{ item.path | basename }}"
                tag: "{{ item.tag }}"
              loop: "{{ containers }}"
              when: item.type == 'ascender' or (item.type == 'ledger' and LEDGER_INSTALL == true)
