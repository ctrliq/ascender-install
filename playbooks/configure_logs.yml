- hosts: all
  tasks:
    - name: Check connectivity
      ping:

- hosts: ledger
  environment:
    K8S_AUTH_KUBECONFIG: "{{ K8S_AUTH_KUBECONFIG }}"
  tasks:
    - name: Get the Service Port
      kubernetes.core.k8s_info:
        api: v1
        kind: Service
        name: parser
        namespace: "{{ LEDGER_NAMESPACE }}"
      register: ledger_service

    - name: Store Results
      ansible.builtin.set_fact:
         ledger_port: "{{ ledger_service.resources[0].spec.ports[0].nodePort }}"

- hosts: ascender
  environment:
    K8S_AUTH_KUBECONFIG: "{{ K8S_AUTH_KUBECONFIG }}"
  tasks:
    - name: Get the Admin password
      kubernetes.core.k8s_info:
        api: v1
        kind: Secret
        name: ascender-admin-password
        namespace: "{{ ASCENDER_NAMESPACE }}"
      register: ascender_password

    - name: Get the Service Port
      kubernetes.core.k8s_info:
        api: v1
        kind: Service
        name: ascender-service
        namespace: "{{ ASCENDER_NAMESPACE }}"
      register: ascender_service

    - name: Store Results
      ansible.builtin.set_fact:
         ascender_username: admin
         ascender_password: "{{ ascender_password.resources[0].data.password | b64decode }}"
         ascender_port: "{{ ascender_service.resources[0].spec.ports[0].nodePort }}"

- hosts: localhost
  gather_facts: no
  connection: local
  tasks:
    - name: Get Ledger IP and Port
      ansible.builtin.set_fact:
        ledger_ip: "{{ hostvars[groups['ledger'][0]].ansible_host }}"
        ledger_parser_port: "{{ hostvars[groups['ledger'][0]].ledger_port }}"
        ascender_ip: "{{ hostvars[groups['ascender'][0]].ansible_host }}"
        ascender_password: "{{ hostvars[groups['ascender'][0]].ascender_password }}"
        ascender_port: "{{ hostvars[groups['ascender'][0]].ascender_port}}"

    - name: Wait until Ascender API is Up
      uri:
        url: "http://{{ ascender_ip }}:{{ ascender_port }}/api/v2/ping/"
        return_content: yes
        validate_certs: no
        status_code:
          - 200
      until: uri_output.status == 200
      retries: 60
      delay: 10
      register: uri_output


    - name: Set all the logging parameters
      awx.awx.settings:
        controller_host: "http://{{ ascender_ip }}:{{ ascender_port }}"
        controller_username: admin
        controller_password: "{{ ascender_password }}"
        settings:
          LOG_AGGREGATOR_HOST: "http://{{ ledger_ip }}"
          LOG_AGGREGATOR_PORT: "{{ ledger_parser_port }}"
          LOG_AGGREGATOR_TYPE: other
          LOG_AGGREGATOR_ENABLED: true
          LOG_AGGREGATOR_VERIFY_CERT: false
          LOG_AGGREGATOR_LEVEL: INFO
